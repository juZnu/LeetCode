import heapq
from typing import List


class Video:
    def __init__(self,videoId,video):
        self.videoId = videoId
        self.video = video
        self.likes = 0
        self.disLikes = 0
        self.views = 0
    
class VideoSharingPlatform:

    def __init__(self):
        self.hashmap = {}
        self.queue = []

    def upload(self, video: str) -> int:
        videoId = 0

        if not self.queue:
            videoId = 0 if not self.hashmap else len(self.hashmap)
        else:
            videoId = heapq.heappop(self.queue)
        
        self.hashmap[videoId] = Video(videoId,video)
        return videoId
    
    def remove(self, videoId: int) -> None:
        if videoId in self.hashmap:
            del self.hashmap[videoId]
            heapq.heappush(self.queue,videoId)
        

    def watch(self, videoId: int, startMinute: int, endMinute: int) -> str:
        if videoId in self.hashmap:
            self.hashmap[videoId].views += 1
            length = len(self.hashmap[videoId].video)
            return self.hashmap[videoId].video[startMinute: min(endMinute+1,length)]
        else:
            return "-1"
        
    def like(self, videoId: int) -> None:
        if videoId in self.hashmap: self.hashmap[videoId].likes += 1
        
    def dislike(self, videoId: int) -> None:
        if videoId in self.hashmap: self.hashmap[videoId].disLikes += 1

    def getLikesAndDislikes(self, videoId: int) -> List[int]:
        return [self.hashmap[videoId].likes,self.hashmap[videoId].disLikes] if videoId in self.hashmap else [-1]

    def getViews(self, videoId: int) -> int:
        return self.hashmap[videoId].views if videoId in self.hashmap else  -1
        


# Your VideoSharingPlatform object will be instantiated and called as such:
# obj = VideoSharingPlatform()
# param_1 = obj.upload(video)
# obj.remove(videoId)
# param_3 = obj.watch(videoId,startMinute,endMinute)
# obj.like(videoId)
# obj.dislike(videoId)
# param_6 = obj.getLikesAndDislikes(videoId)
# param_7 = obj.getViews(videoId)